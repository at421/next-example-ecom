import "../assets/css/styles.scss";
import "swiper/swiper.scss";
import "rc-slider/assets/index.css";
import "react-rater/lib/react-rater.css";

import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import Script from "next/script";
import { GA_TRACKING_ID } from "@/utils/gtag"; // Assuming gtag is now in src/utils/gtag or similar

import { StoreProvider } from "@/components/StoreProvider"; // Client component for Redux
import { GtagRouterEvents } from "@/components/GtagRouterEvents"; // Client component for GA pageviews

import Layout from "../layouts/Main";

const isProduction = process.env.NODE_ENV === "production";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600"],
  variable: "--main-font",
});

// Optional: Add metadata if needed, replacing parts of _document.tsx <Head>
// export const metadata: Metadata = {
//   title: 'My App',
//   description: 'Generated by create next app',
// }

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      {/*
        The <head> tag is automatically managed by Next.js app directory.
        Metadata should be defined via the `export const metadata` object.
        Direct <head> elements can be placed here if needed, but metadata is preferred.
      */}
      <body className={poppins.variable}>
        <StoreProvider>
          <Layout>
            {children}
          </Layout>
          {/* Client component to handle GA pageview tracking */}
          {isProduction && <GtagRouterEvents />}
        </StoreProvider>

        {/* We only want to add the scripts if in production */}
        {isProduction && (
          <>
            {/* Global Site Tag (gtag.js) - Google Analytics */}
            <Script
              async
              src={`https://www.googletagmanager.com/gtag/js?id=${GA_TRACKING_ID}`}
            />
            <Script
              id="gtag-init" // Unique id for the script
              strategy="afterInteractive" // Load after the page is interactive
              dangerouslySetInnerHTML={{
                __html: `
                  window.dataLayer = window.dataLayer || [];
                  function gtag(){dataLayer.push(arguments);}
                  gtag('js', new Date());

                  gtag('config', '${GA_TRACKING_ID}', {
                    page_path: window.location.pathname,
                  });
                `,
              }}
            />
          </>
        )}
      </body>
    </html>
  );
}